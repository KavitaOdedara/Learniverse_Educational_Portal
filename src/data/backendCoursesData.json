{
  "courses": [
    {
      "id": 1,
      "name": "Node.js with Express.js",
      "description": "Learn to build web applications using Node.js and Express.js.",
      "chapters": [
        {
          "id": 1,
          "title": "Introduction to Node.js",
          "content": [
            "Node.js is a JavaScript runtime built on Chrome's V8 engine. It enables developers to run JavaScript on the server side, which was traditionally used only on the client side in web browsers.",
            "Node.js is event-driven, meaning it can handle multiple requests simultaneously without blocking. It uses a non-blocking, event-driven I/O model that makes it lightweight and efficient for real-time applications.",
            "With its asynchronous architecture, Node.js is particularly suited for building scalable network applications such as web servers, real-time chat applications, and streaming platforms.",
            "Node.js has a built-in package manager called npm (Node Package Manager), which simplifies the installation of third-party libraries and frameworks.",
            "A major advantage of Node.js is its large ecosystem of open-source packages available through npm, which helps developers save time and effort by reusing pre-built solutions."
          ],
          "example": {
            "code": "console.log('Hello, Node.js');"
          }
        },
        {
          "id": 2,
          "title": "Setting Up Node.js Environment",
          "content": [
            "To begin using Node.js, you must first install it on your machine. Node.js comes bundled with npm, which helps you manage dependencies and packages.",
            "You can download the latest version of Node.js from the official website. Once installed, you can verify the installation by running `node -v` in your terminal to check the Node.js version.",
            "For a basic Node.js app, you'll need to create an `index.js` file where you can write the server logic. The `http` module, which comes with Node.js, is used to create a simple web server.",
            "Node.js also has an event loop that enables non-blocking I/O, so the server doesn't have to wait for one request to finish before processing the next one. This improves performance, especially in high-traffic applications.",
            "In addition to creating simple servers, you can install and use various frameworks such as Express.js, which simplify routing and handling HTTP requests."
          ],
          "example": {
            "code": "const http = require('http');\nhttp.createServer((req, res) => {\n  res.write('Hello, World!');\n  res.end();\n}).listen(8080);"
          }
        },
        {
          "id": 3,
          "title": "Introduction to Express.js",
          "content": [
            "Express.js is a minimalist web framework built on top of Node.js that simplifies routing and middleware management. It provides a flexible structure that makes it easier to build web applications and APIs.",
            "Express.js allows you to create route handlers for different HTTP methods (GET, POST, PUT, DELETE) and provides tools to manage user sessions, cookies, and other aspects of web development.",
            "Express is highly extensible, allowing you to integrate with various templating engines, databases, and other backend services. Express's middleware system allows you to execute custom logic for requests before they reach your route handlers.",
            "With Express, you can quickly set up routes, handle requests, and integrate various packages such as body parsers, CORS handling, and authentication middleware.",
            "Express.js reduces boilerplate code and allows you to focus more on application logic, making it ideal for both small-scale and large-scale web projects."
          ],
          "example": {
            "code": "const express = require('express');\nconst app = express();\napp.get('/', (req, res) => {\n  res.send('Hello, Express!');\n});\napp.listen(3000);"
          }
        },
        {
          "id": 4,
          "title": "Routing in Express.js",
          "content": [
            "Routing in Express.js involves defining URL patterns for handling different HTTP requests (GET, POST, etc.). Routes are responsible for processing incoming requests and sending responses.",
            "With Express, routes can be as simple or as complex as needed. You can define a route that handles specific URLs or use route parameters for dynamic URL segments.",
            "Express allows you to group related routes using `app.use()` to create modular code. You can also use router modules to organize routes into different files.",
            "Dynamic routes in Express allow you to capture values from the URL. For example, you can define a route `/users/:id` to capture the user ID from the URL and use it in your handler function.",
            "In addition to basic routing, Express also allows you to use query parameters, headers, and cookies to process requests dynamically."
          ],
          "example": {
            "code": "app.get('/users/:id', (req, res) => {\n  res.send(`User ID is ${req.params.id}`);\n});"
          }
        },
        {
          "id": 5,
          "title": "Middleware in Express.js",
          "content": [
            "Middleware in Express.js are functions that execute during the request-response cycle. They have access to the request object, the response object, and the next function in the cycle.",
            "Middleware functions are executed in the order they are defined. You can use middleware for tasks such as logging, authentication, validation, and error handling.",
            "Middleware can either terminate the request-response cycle or pass control to the next middleware using `next()`. If you don't call `next()`, the request will hang.",
            "Express provides built-in middleware like `express.json()` for parsing JSON bodies and `express.static()` for serving static files like images, CSS, and JavaScript.",
            "Custom middleware functions are often used for logging requests, managing sessions, or implementing security features like CORS (Cross-Origin Resource Sharing)."
          ],
          "example": {
            "code": "app.use((req, res, next) => {\n  console.log('Request made to:', req.url);\n  next();\n});"
          }
        },
        {
          "id": 6,
          "title": "Connecting to a Database",
          "content": [
            "Connecting to a database in a Node.js application typically involves using an Object-Relational Mapping (ORM) or Object Data Modeling (ODM) library. In this case, we'll look at MongoDB, a popular NoSQL database.",
            "MongoDB is a document-based database, which means it stores data as JSON-like documents. This format allows for flexible schemas and fast queries, making MongoDB ideal for applications with dynamic data.",
            "Mongoose is an ODM library for MongoDB that provides a powerful schema-based solution for managing data. You can define models in Mongoose, which are used to interact with the MongoDB database.",
            "To connect to MongoDB from your Express app, you first need to install the Mongoose package and set up a connection string pointing to your MongoDB instance.",
            "Once connected, you can use Mongoose models to create, read, update, and delete data in the database. Mongoose also supports validation, middleware, and query building."
          ],
          "example": {
            "code": "const mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/mydb', { useNewUrlParser: true });\nconst Schema = mongoose.Schema;\nconst userSchema = new Schema({ name: String, age: Number });\nconst User = mongoose.model('User', userSchema);"
          }
        }
      ]
    },
    {
      "id": 2,
      "name": "Python with Flask",
      "description": "Build web applications using Python and the Flask framework.",
      "chapters": [
        {
          "id": 1,
          "title": "Introduction to Flask",
          "content": [
            "Flask is a micro web framework for Python that is lightweight, flexible, and easy to use. Unlike other web frameworks like Django, Flask doesn't come with an ORM or a form handling library, allowing developers to pick their own tools and libraries.",
            "Flask uses Jinja2 templating to render dynamic HTML pages and Werkzeug for routing and request handling. These tools are highly extensible and allow Flask to be used for various web applications.",
            "One of the main benefits of Flask is its simplicity. Developers can start building applications with minimal setup and quickly scale up as needed. It is often used for small to medium-sized applications, APIs, and prototyping.",
            "Flask supports both synchronous and asynchronous programming, which makes it flexible for building both traditional and real-time applications like chat applications and API services.",
            "Additionally, Flask supports extensions for adding functionality such as database integration, form validation, user authentication, and more."
          ],
          "example": {
            "code": "from flask import Flask\napp = Flask(__name__)\n@app.route('/')\ndef home():\n  return 'Hello, Flask!'\napp.run(debug=True)"
          }
        },
        {
          "id": 2,
          "title": "Setting Up Flask Environment",
          "content": [
            "To begin developing Flask applications, you need to install Python (version 3.7 or later) and Flask. It's a good practice to use a virtual environment to manage dependencies.",
            "You can install Flask using `pip`, the Python package manager, by running `pip install flask`. Virtual environments help isolate dependencies for different projects, preventing version conflicts.",
            "After installing Flask, you can create a basic Flask app by initializing an instance of the `Flask` class and defining routes to handle HTTP requests.",
            "Flask uses the Jinja2 templating engine by default, which allows you to dynamically generate HTML pages based on data passed from Python functions.",
            "Once your app is ready, you can run it using `flask run` in the terminal. Flask will start a development server that you can access in your browser."
          ],
          "example": {
            "code": "pip install flask\npython -m venv venv\nsource venv/bin/activate\nflask run"
          }
        },
        {
          "id": 3,
          "title": "Flask Routing",
          "content": [
            "In Flask, routing refers to defining URL patterns that map to specific view functions. When a user makes a request to a specific URL, Flask will call the corresponding view function.",
            "Routes in Flask are defined using the `@app.route()` decorator, which binds the function to a specific URL. For example, `@app.route('/')` maps the home page URL to the `home()` function.",
            "Flask also supports dynamic routing, where parts of the URL are treated as variables and passed to view functions. For example, you can define a route like `/greet/<name>` to greet a user based on the `name` URL parameter.",
            "By default, Flask responds to HTTP GET requests. However, you can also handle other HTTP methods like POST, PUT, DELETE, and PATCH by using the corresponding decorators like `@app.route('/submit', methods=['POST'])`.",
            "You can also add route parameters to your Flask routes, which allows you to handle data passed in the URL path, such as `/users/<id>` for accessing user details by ID."
          ],
          "example": {
            "code": "app.route('/greet/<name>')\ndef greet(name):\n  return f'Hello, {name}!'"
          }
        },
        {
          "id": 4,
          "title": "Templates and Static Files in Flask",
          "content": [
            "Flask uses Jinja2 templating to render HTML pages dynamically. Jinja2 allows you to pass variables, control structures (loops, conditions), and templates for layout inheritance.",
            "In Flask, templates are stored in the `templates/` directory. The Jinja2 templating engine can include or render other templates to build complex web pages with ease.",
            "Static files like CSS, JavaScript, and image files are stored in the `static/` directory. Flask automatically serves these files when requested through URLs, allowing you to link your static resources in HTML templates easily.",
            "You can also use Flask’s `url_for()` function to generate URLs for static files or routes dynamically, making your web app more portable and adaptable to changes in the routing structure."
          ],
          "example": {
            "code": "from flask import render_template\n@app.route('/')\ndef home():\n  return render_template('index.html')"
          }
        },
        {
          "id": 5,
          "title": "Form Handling in Flask",
          "content": [
            "Flask-WTF simplifies form handling by providing an easy-to-use interface for handling form data, validating form inputs, and protecting against Cross-Site Request Forgery (CSRF) attacks.",
            "You can create forms in Flask by defining form classes, and these classes can include fields like text inputs, select options, and checkboxes, as well as validators like required fields or minimum length constraints.",
            "Flask-WTF also supports file uploads, multi-checkbox fields, and custom validation rules, which makes it a powerful tool for building user-friendly forms."
          ],
          "example": {
            "code": "from flask_wtf import FlaskForm\nfrom wtforms import StringField, SubmitField\nclass NameForm(FlaskForm):\n  name = StringField('Name')\n  submit = SubmitField('Submit')"
          }
        },
        {
          "id": 6,
          "title": "Connecting to a Database",
          "content": [
            "SQLAlchemy is a powerful Object-Relational Mapping (ORM) library that allows you to define models and interact with databases in a Pythonic way. SQLAlchemy is commonly used with Flask to manage database connections and perform CRUD operations.",
            "With SQLAlchemy, you can define models as Python classes, and SQLAlchemy will map these classes to database tables. Each model corresponds to a table, and the fields in the model correspond to columns in the table.",
            "SQLAlchemy also supports relationships between models (e.g., one-to-many or many-to-many relationships), which makes it easier to work with complex data structures and retrieve related data from multiple tables.",
            "To interact with a relational database, you'll first need to configure the database URI and initialize SQLAlchemy with your Flask app."
          ],
          "example": {
            "code": "from flask_sqlalchemy import SQLAlchemy\ndb = SQLAlchemy()\nclass User(db.Model):\n  id = db.Column(db.Integer, primary_key=True)\n  name = db.Column(db.String(100))"
          }
        }
      ]
    },
    {
      "id": 3,
      "name": "SQL with MySQL",
      "description": "Learn to manage and manipulate relational databases using MySQL.",
      "chapters": [
        {
          "id": 1,
          "title": "Introduction to SQL",
          "content": [
            "SQL (Structured Query Language) is the standard language for interacting with relational databases. It provides a powerful syntax for defining, manipulating, and querying data.",
            "MySQL is one of the most widely used relational database management systems (RDBMS). It supports SQL queries for creating databases, defining tables, and performing operations on data stored in those tables.",
            "SQL allows you to interact with data using various commands such as `SELECT`, `INSERT`, `UPDATE`, and `DELETE`.",
            "Relational databases organize data into tables, each containing rows and columns. Each table typically has a primary key that uniquely identifies each record."
          ],
          "example": {
            "code": "SELECT * FROM users;"
          }
        },
        {
          "id": 2,
          "title": "Setting Up MySQL",
          "content": [
            "Before you can start working with MySQL, you need to install it on your computer. MySQL is available for Windows, Linux, and macOS, and installation guides are available on the official MySQL website.",
            "Once MySQL is installed, you can use MySQL Workbench or the command-line client to manage databases, tables, and users.",
            "To set up a new database, you can use the `CREATE DATABASE` statement, followed by the database name."
          ],
          "example": {
            "code": "mysql -u root -p\nCREATE DATABASE mydatabase;\nUSE mydatabase;"
          }
        },
        {
          "id": 3,
          "title": "Creating and Managing Databases",
          "content": [
            "SQL commands like `CREATE DATABASE`, `CREATE TABLE`, and `ALTER TABLE` are used to create and modify databases and their structures.",
            "Each table in a database is made up of rows and columns, where columns represent data types like integers, strings, dates, and more.",
            "Database normalization helps in organizing data efficiently and minimizing redundancy. You can define primary keys to uniquely identify records and foreign keys to establish relationships between tables."
          ],
          "example": {
            "code": "CREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(100));"
          }
        },
        {
          "id": 4,
          "title": "Performing CRUD Operations",
          "content": [
            "CRUD operations are the fundamental operations used to interact with data in SQL databases. CRUD stands for Create, Read, Update, and Delete.",
            "The `INSERT INTO` statement is used to add new data to a table, `SELECT` is used to query and retrieve data, `UPDATE` modifies existing data, and `DELETE` removes data from the table."
          ],
          "example": {
            "code": "INSERT INTO users (id, name) VALUES (1, 'John Doe');\nSELECT * FROM users;\nUPDATE users SET name = 'Jane Doe' WHERE id = 1;\nDELETE FROM users WHERE id = 1;"
          }
        },
        {
          "id": 5,
          "title": "Advanced SQL Queries",
          "content": [
            "Advanced SQL queries use clauses like `JOIN`, `GROUP BY`, and `HAVING` to manipulate and retrieve data in more sophisticated ways.",
            "JOIN operations combine rows from two or more tables based on a related column. `INNER JOIN` returns matching records, while `LEFT JOIN` returns all records from the left table and matching ones from the right table.",
            "The `GROUP BY` clause groups rows that have the same values into summary rows, like finding the average salary of employees in each department."
          ],
          "example": {
            "code": "SELECT users.name, COUNT(orders.id) FROM users JOIN orders ON users.id = orders.user_id GROUP BY users.name;"
          }
        },
        {
          "id": 6,
          "title": "Database Security and Backup",
          "content": [
            "Database security involves protecting data from unauthorized access and ensuring the integrity of the database.",
            "MySQL offers various security features like user authentication, roles, and privileges to control access to data. You can also configure encrypted connections to secure data transmission.",
            "Regular backups are essential for data recovery in case of system failure or data corruption. MySQL provides the `mysqldump` tool to create database backups and `mysqlimport` to restore data."
          ],
          "example": {
            "code": "mysqldump -u root -p mydatabase > backup.sql"
          }
        }
      ]
    },
    {
      "id": 4,
      "name": "MongoDB (NoSQL Database)",
      "description": "Learn about NoSQL databases with a focus on MongoDB.",
      "chapters": [
        {
          "id": 1,
          "title": "Introduction to NoSQL",
          "content": [
            "NoSQL databases are designed to handle large volumes of unstructured data. They are known for their scalability, flexibility, and ability to store data without a fixed schema.",
            "MongoDB is a document-based NoSQL database that stores data in JSON-like documents. This format is more flexible than the rigid relational schema of traditional SQL databases.",
            "NoSQL databases like MongoDB are commonly used in real-time applications, big data analytics, and content management systems."
          ],
          "example": {
            "code": "db.users.insert({name: 'John Doe', age: 30});"
          }
        },
        {
          "id": 2,
          "title": "Setting Up MongoDB",
          "content": [
            "MongoDB can be installed on various operating systems, including Windows, macOS, and Linux. Once installed, you can start the MongoDB server using `mongod` and access the MongoDB shell with the `mongo` command.",
            "MongoDB provides high availability and scalability with replica sets, which maintain copies of the data across different servers. It also supports sharding to distribute data across multiple servers for improved performance."
          ],
          "example": {
            "code": "sudo service mongod start"
          }
        },
        {
          "id": 3,
          "title": "CRUD Operations in MongoDB",
          "content": [
            "MongoDB supports the standard CRUD operations: Create, Read, Update, and Delete. These operations can be performed using the Mongo shell or a MongoDB driver in your application.",
            "You can use the `db.collection.insert()` method to create new documents, `db.collection.find()` to query data, `db.collection.update()` to modify existing documents, and `db.collection.remove()` to delete documents."
          ],
          "example": {
            "code": "db.users.find();\ndb.users.update({name: 'John Doe'}, {$set: {age: 31}});\ndb.users.remove({name: 'John Doe'});"
          }
        },
        {
          "id": 4,
          "title": "Data Modeling in MongoDB",
          "content": [
            "MongoDB allows you to store data in a flexible format, which means you can define schemas using embedded documents and references between collections.",
            "Embedded documents are stored directly within the parent document, while references link documents across different collections.",
            "When designing MongoDB schemas, it's important to consider how you will query and update data, as well as the balance between embedding and referencing documents."
          ],
          "example": {
            "code": "db.users.insert({name: 'John Doe', address: {street: '123 Main St', city: 'Anytown'}});"
          }
        },
        {
          "id": 5,
          "title": "Indexes and Aggregation",
          "content": [
            "Indexes in MongoDB are used to optimize query performance. By default, MongoDB creates an index on the `_id` field, but you can create custom indexes on other fields to improve query efficiency.",
            "The aggregation framework in MongoDB allows you to process and transform data. You can use operations like `$match`, `$group`, and `$sort` to filter, group, and sort documents in a pipeline."
          ],
          "example": {
            "code": "db.users.createIndex({age: 1});\ndb.users.aggregate([{$match: {age: 30}}, {$group: {_id: '$city', total: {$sum: 1}}}]);"
          }
        },
        {
          "id": 6,
          "title": "MongoDB Security and Backup",
          "content": [
            "MongoDB provides authentication mechanisms to control access to databases and collections. You can use username and password authentication, as well as roles and permissions to fine-tune access control.",
            "To protect data, you can use encrypted connections (SSL/TLS) to ensure that data is transmitted securely. MongoDB also supports encryption-at-rest for data stored on disk.",
            "For backup and disaster recovery, MongoDB provides tools like `mongodump` for creating backups and `mongorestore` for restoring data."
          ],
          "example": {
            "code": "mongodump --uri=mongodb://localhost/mydb --out=/backup/\nmongorestore --uri=mongodb://localhost/mydb /backup/"
          }
        }
      ]
    }
  ]
}
